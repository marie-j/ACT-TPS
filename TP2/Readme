Mercier Tony
Jones Marie 

ACT - TP2 : Programmation dynamique 

Partie 1 : Implémentation 

-- Meilleur gris  : on suppose qu'on dispose d'une palette qui est un tableau allant de 0 à 255 et qui pour chaque case contient le nombre 
de pixels ayant pour niveau de gris l'indice de cette case

    entrée : premier ,dernier des entiers >= 0 , <= 255, premier < dernier ;
    sortie : moyenne pondérée de la tranche entre le premier et le dernier gris 

    debut 

        soient nb_total et somme_coeff des entiers; 

        pour i allant de premier à dernier 

            nb_total <- palette[i] + nb_total;
            somme_coeff <- somme_coeff + palette[i]*i;
        fin pour; 

        retourner Partie_Entiere(somme_coeff/nb_total);

    fin 

-- Distance Minimale : comme pour meilleur gris nous disposons de la même palette 

    entrée : premier , dernier des entiers >=0 , <= 255 , premier < dernier;
    sortie : la distance minimale qu'entraine la fusion d'un intervalle de la palette 

    debut

        soient meilleur et dist des entiers;

        meilleur = meilleur_gris(premier,dernier);

        pour i allant de premier à dernier 
            dist <- dist + (i - meilleur)^2 * palette[i]; 
        fin pour;

        retourner dist;
    fin 

-- Décomposition de l'image 

    distance (palette(i ... n),k) = distance_min (i,j) + distance(palette(j ... n), k -1)

    Algorithme : on suppose qu'on dispose d'une palette comme pour meilleur_gris

    entrée : n , k des entiers >0;
    sortie : un tableau contenant l'indice de début des intervalles, excepté pour le premier où on sait qu'il vaut 0 

    début 

        soient tab un tableau à 256 cases de tableaux à 256 cases 
        soit rem un tableau à k -1 cases
        soient cpt,fin,i,j,m,p,min,cpt,debut des entiers;
        soit recommence un booleen

        //initialisation du tableau 

        pour i allant de 0 à 255 faire 
            pour j allant de 0 à 255 faire 

                //la diagonale vaut 0 sinon on initialise avec le plus grand nombre possible 
                si i = j alors
                    tab[i][j] = 0
                sinon 
                    tab[i][j] = MaxInt
                fin si

            fin pour 
        fin pour

        //on appelle la fonction récursive sur toute la palette avec k découpes
        min = rec(0,255,k)

        //Remontée 
        cpt = k
        fin = 255
        debut = 255
        recommence = false

        tant que (d != 0 et cpt != 0) faire
          
          si cpt = 1 alors
            min = min - tab[0][fin]
            si min != 0 alors
                recommence = true
            sinon 
                cpt -1
            fin si
        sinon 
            pour m descendant de debut à 0

                si tab[m][fin] = MaxInt && tab[i][end] <= min 
                    min = min - tab[i][fin]
                    rem[cpt -2] = i

                    si i = 0
                        recommence = true
                    sinon
                        fin = i -1
                        debut = fin
                        cpt -1
                    fin si 

                    sortir de la boucle m

                fin si
            fin pour

            si recommence = true && min != 0 alors
                cpt +1
                
                si cpt = k alors
                    fin = 255
                sinon 
                    fin = rem[cpt -1] -1
                fin si 

                debut = rem[cpt -2] -1
                min = tab[0][255]
                tmp = 255

                pour p allant de k -2 à cpt faire
                    min = min - tab[rem[j]][tmp]
                    tmp = rem[j] -1
                fin pour 

                recommence = false
            fin si  

        fin tant que

        retourner rem;

    fin

    -- Fonction récursive : 

        entrée : debut, fin des entiers >= 0 , <= 255
                k un entier >= 0

        sortie : distance minimale de la réduction de la palette

        debut 

            si k = 1 alors

                si tab[debut][fin] = MaxInt alors
                    tab[debut][fin] = distance_min(debut,fin)
                fin si 
                retourne tab[debut][fin]

            sinon 

                pour j allant de debut + 1 à fin - 1  faire 
                    si palette[j] != 0 faire 

                        si tab[debut][j] = MaxInt faire 
                            tab[debut][j] = distance_min(debut,j)
                         fin si 

                         tab[debut][fin] = min(tab[debut][fin], tab[debut][j] + rec(j+1,fin,k -1))
                     fin si 
                fin pour 
            fin si
        fin

-- Calcul d'une nouvelle palette pour une image 

    entrée : img une image  au format d'un tableau deux dimensions 
            k le nombre de couleurs qu'on veut pour l'image 

    sortie : un tableau à deux dimensions représentant la nouvelle image 

    soit palette un tableau d'entier de taille 256
    soit tab un tableau de taille k -1
    soit new_gris un tableau de taille k 
    soit nouvelle_image un tableau de tableaux aux mêmes dimensions que img
    soient i, j ,l,tmp,debut des entiers

    pour i allant de 0 à img.largeur faire 
        pour j allant de 0 à img[i].longueur faire

            palette[conversion_en_entier(img[i][j])]++;

        fin pour
    fin pour

    tab = reduction(palette,k)

    debut = 0
    pour i allant de 0 à k -1 faire 
        new_gris[i] = meilleur_gris(debut,tab[i] -1)
        debut = tab[i]
    fin pour 
    new_gris[k] = meilleur_gris(debut,255)

    pour i allant de 0 à img.largeur faire
        pour j allant de 0 à img[i].longueur faire
            tmp = img[i][j]
            si tmp > tab[k -2] alors 
                nouvelle_image[i][j] = new_gris[k -1]
            sinon 
                pour l allant de 0 à k -1 alors 
                    si tmp < tab[l] alors 
                        nouvelle_image[i][j] = new_gris[l]
                        sortir de la boucle 
                    fin si
                fin pour 
            fin si 
        fin pour 
    fin pour 

    retourner nouvelle_image

-- Pourquoi fusionner des couleurs voisines ? 

    Fusionner des couleurs voisines est plus efficace que fusionner des couleurs quelconques.

    Reprenons l'exemple de l'énoncé , supposons que l'on fusionne 0 et 255 ensemble et 20 et 180 , la somme des deux sera beaucoup plus grande que la somme 0-20 et 180-255.

    De plus en fusionnant des couleurs "voisines" on prend également en compte les couleurs dont le poids est à 0 , ce qui n'influe en rien la distance pour l'intervalle et qui élimine le risque qu'une de ces couleurs soit associée à un autre intervalle.

Partie 2 : Utilisation

Pour créer la nouvelle palette : 

    java -jar palette.jar <image au format gray> <nombre de réductions> > <nom nouvelle image>

Pour init-palettes la conversion se passe bien , le résultat obtenu est test.pngNous avons également testé avec le babouin , le résultat obtenu est babouin.png 

