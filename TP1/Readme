Mercier Tony
Jones Marie 

ACT TP1 : 

> Première approche 

- Algo en n3 : 

entrée : l , h entiers >0 
         n entier >= 0
         une liste tab contenant les coordonnées (xi,yi) des n points 

sortie : la surface maximale d'un rectangle respectant les contraintes

soient i,j,k,abs,largeur,minHauteur,max,tmps entiers;

ajout des points (0,0) et (l,0) dans tab;
tri rapide de tab;

pour i allant de 0 à n

    abs <- tab[i].xi

    pour j allant de i + 1  à n + 1

        largeur <- tab[j].xi - abs;
        minHauteur <- h

        pour k allant de i à j 

            si (minHauteur > tab[k].yi)

                minHauteur <- tab[k].yi

            fin si

        fin pour

        tmp <- minHauteur * largeur

        si (tmp > max)

            max <- tmp

        fin si 

    fin pour 
fin pour 

retourner max;

- Algo en n2 : 

entrée : l , h entiers >0 
         n entier >= 0
         une liste tab contenant les coordonnées (xi,yi) des n points 

sortie : la surface maximale d'un rectangle respectant les contraintes

soient i,j,abs,largeur,minHauteur,max,tmp,y,res entiers;

ajout des points (0,0) et (l,0) dans tab;
tri rapide de tab;

pour i allant de 0 à n 

    abs <- tab[i].xi
    tmp <- tab[i + 1].yi

    pour j allant de i + 1 à n + 1 

        largeur <- tab[j].xj - abs 
        y <- tab[j].yj

        si j = i + 1
            minHauteur <- h
        sinon
            minHauteur <- tmp
        fin si 

        si y < tmp && y != 0 
            tmp <- y
        fin si 

        res <- minHauteur * largeur

        si res > max 
            max = res
        fin si 

    fin pour
fin pour 

> Diviser pour régner 

- Algo : 

* Fonction principale

entrée : l , h entiers >0 
         n entier >= 0
         une liste tab contenant les coordonnées (xi,yi) des n points 

sortie : la surface maximale d'un rectangle respectant les contraintes

soient i,j,k,abs,largeur,minHauteur,max,tmps entiers;

ajout des points (0,0) et (l,0) dans tab;
tri rapide de tab;

rec (l,h,n,tab);

* Fonction rec :

entrée : l,h entiers > 0 
         n entier >=0
         liste tab de point triée par abscisse croissantes 

sortie : surface maximale d'un rectangle respectant les contraintes

soient i , pivot, minHauteur,tranche_gauche,tranche_milieu,tranche_droite entiers;

    si n = 0

        retourner l * h 

    sinon 

        pivot <- 1
        minHauteur <- tab[pivot].y

        pour i allant de 2 à n 

            si (tab[i].y < minHauteur ) 

                pivot <- i 

            fin si

        fin pour 

        tranche_milieu <- (tab[n +1].x - tab[0].x) * tab[pivot].y
        tranche_gauche <- rec(tab[pivot].x - tab[0].x , h , pivot - 1 , tab[0 ... pivot])
        tranche_droite <- rec(tab[n +1].x - tab[pivot].x,h, n - pivot , tab[pivot ... n +1 ])

        max(tranche_gauche,tranche_milieu,tranche_droite)

    fin si

- Analyse de l'algo : 

A l'éxécution, notamment pour l'exemple ex100000_100000, on constate que l'algo est beaucoup plus rapide . 

Dans le meilleur des cas : n = 0 donc l'algo est en ɵ(1)

Dans le pire des cas : Les ordonnées des points sont dans un ordre croissant ou décroissant

    Equation de récurrence : 
        rec(0) = k ou k entier 

        rec(n) = rec(n-1) + rec(1) + O(n)
        rec(n) = rec(n- 2) + rec(1) + rec(0) + k1*n + k1*n 
        rec(n) = rec(n-3) + rec(1) + rec(0) + k1*n  + k + 2*k1*n
        ...
        rec(n) = (n-1)*k1*n + (n-2)*k

        rec(n) = O(n2) 


> Hauteur limitée 

- Algo : 

 